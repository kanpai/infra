#!/usr/bin/env python3

import json
import pathlib
import argparse
import subprocess
from glob import glob

parser = argparse.ArgumentParser(description='Build NixOS images for installing on bare-metal machines')

parser.add_argument('installer', type=str, help='Installer name. See config.nix/installers')
parser.add_argument('--flash-to', type=pathlib.Path, default=None, help='Flash image to drive')
parser.add_argument('--quiet', action='store_true', help='Hide output')
parser.add_argument('--no-nom', action='store_true', help='Don\'t show extended output from nom')

args = parser.parse_args()

print(f'Building image based on {args.installer}')

infoCmd = subprocess.run([
    'nix',
    'eval',
    '--json',
    f'.#nixosConfigurations.installer-{args.installer}.config',
    '--apply',
    'config: { inherit (config.nixpkgs) system; }',
],
    capture_output=True,
)
if infoCmd.returncode != 0:
    print("Failed to fetch installer info")
    print("Error from nix:")
    print(infoCmd.stderr.decode())
    exit(1)

info = json.loads(infoCmd.stdout)
buildAttr = {
    'x86_64-linux': 'isoImage',
    'aarch64-linux': 'sdImage',
}[info['system']]

nomAvailable = subprocess.getstatusoutput('command -v nom')[0] == 0
buildCmd = subprocess.run([
    'nom' if not args.quiet and nomAvailable and not args.no_nom else 'nix',
    'build',
    f'.#nixosConfigurations.installer-{args.installer}.config.system.build.{buildAttr}',
],
    stdout=subprocess.DEVNULL if args.quiet else None,
    stderr=subprocess.DEVNULL if args.quiet else None,
)

if args.flash_to != None:
    images = glob('./result/iso/nixos-*.iso')
    if len(images) < 1:
        print('Could not determine ISO path; not flashing!')
    else:
        image = images[0]
        device = args.flash_to
        print(f'Flashing image {image} to {device}')
        buildCmd = subprocess.run([
            'sudo',
            'dd',
            '' if args.quiet else 'status=progress',
            f'if={image}',
            f'of={device}'
        ],
            stdout=subprocess.DEVNULL if args.quiet else None,
        )

        if buildCmd.returncode == 0:
            print(f'Successfully flashed {image}')
            print(f'You may now remove {device}')
        else:
            print(f'Flash failed with dd error {buildCmd.returncode}')
else:
    print('Done')
