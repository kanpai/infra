{ lib, pkgs, config, ... }:
let
  inherit (lib.attrsets) attrsToList mapAttrsToList;
  inherit (lib.lists) flatten;
  inherit (lib.strings) concatStringsSep;

  domain = "kanp.ai";
  fqdn = "mail.${domain}";

  dbname = "maddy";

  # inbox = [ alias1 alias2 ];
  aliases = {
    "mib@${domain}" = [
      "abuse@${domain}"
      "admin@${domain}"
      "postmaster@${domain}"
    ];
  };

  aliasEntry = ''
    optional_step static {
      ${concatStringsSep
        "\n"
        (flatten
          (mapAttrsToList
            (inbox: map (alias: "entry ${alias} ${inbox}"))
            aliases
          )
        )
      }
    }
  '';

  cfg = config.services.maddy;
in
{
  services = {
    maddy = {
      enable = true;
      openFirewall = true;
      hostname = fqdn;
      primaryDomain = domain;

      tls = {
        loader = "file";
        certificates =
          let
            certDir = config.security.acme.certs.${fqdn}.directory;
          in
          [{
            keyPath = "${certDir}/key.pem";
            certPath = "${certDir}/cert.pem";
          }];
      };

      config =
        let
          database = ''
            driver postgres
            dsn postgres://${dbname}@/${dbname}?host=/run/postgresql
          '';
        in
        ''
          auth.pass_table local_authdb {
            table sql_table {
              ${database}
              table_name passwords
            }
          }

          storage.imapsql local_mailboxes {
            ${database}
          }

          table.chain local_rewrites {
            optional_step regexp "(.+)\+(.+)@(.+)" "$1@$3"
            optional_step static {
              entry postmaster postmaster@$(primary_domain)
            }
            ${aliasEntry}
          }

          msgpipeline local_routing {
            destination postmaster $(local_domains) {
              modify {
                replace_rcpt &local_rewrites
              }
              deliver_to &local_mailboxes
            }
            default_destination {
              reject 550 5.1.1 "User doesn't exist"
            }
          }

          smtp tcp://0.0.0.0:25 {
            limits {
              all rate 20 1s
              all concurrency 10
            }
            dmarc yes
            check {
              require_mx_record
              dkim
              spf
            }
            source $(local_domains) {
              reject 501 5.1.8 "Use Submission for outgoing SMTP"
            }
            default_source {
              destination postmaster $(local_domains) {
                deliver_to &local_routing
              }
              default_destination {
                reject 550 5.1.1 "User doesn't exist"
              }
            }
          }

          submission tcp://0.0.0.0:587 {
            limits {
              all rate 50 1s
            }
            auth &local_authdb
            source $(local_domains) {
              check {
                  authorize_sender {
                      prepare_email &local_rewrites
                      user_to_email identity
                  }
              }
              destination postmaster $(local_domains) {
                  deliver_to &local_routing
              }
              default_destination {
                  modify {
                      dkim $(primary_domain) $(local_domains) default
                  }
                  deliver_to &remote_queue
              }
            }
            default_source {
              reject 501 5.1.8 "Non-local sender domain"
            }
          }

          target.remote outbound_delivery {
            limits {
              destination rate 20 1s
              destination concurrency 10
            }
            mx_auth {
              dane
              mtasts {
                cache fs
                fs_dir mtasts_cache/
              }
              local_policy {
                  min_tls_level encrypted
                  min_mx_level none
              }
            }
          }

          target.queue remote_queue {
            target &outbound_delivery
            autogenerated_msg_domain $(primary_domain)
            bounce {
              destination postmaster $(local_domains) {
                deliver_to &local_routing
              }
              default_destination {
                  reject 550 5.0.0 "Refusing to send DSNs to non-local addresses"
              }
            }
          }

          imap tcp://0.0.0.0:143 {
            auth &local_authdb
            storage &local_mailboxes
          }
        '';
    };

    postgresql = {
      ensureDatabases = [ dbname ];
      ensureUsers = [{ name = dbname; ensureDBOwnership = true; }];
      # not entirely sure peer auth fails, but this works for now.
      authentication = "local maddy maddy trust";
    };
  };

  systemd.services.maddy.requires = [ "postgresql.service" ];

  security.acme.certs.${fqdn} = {
    group = cfg.group;
    extraDomainNames = [ domain ];
  };

  persist.directories = [{
    directory = "/var/lib/maddy";
    mode = "0755";
    inherit (cfg) user group;
  }];
}
